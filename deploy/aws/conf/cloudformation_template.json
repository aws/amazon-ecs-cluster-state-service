{
  "Description": "Template to deploy Blox framework on AWS",

  "Parameters": {
    "EcsAmiId": {
      "Type": "String",
      "Description": "Optional ECS AMI Id",
      "Default": ""
    },
    "InstanceType": {
      "Type": "String",
      "Description": "ECS EC2 instance type",
      "Default": "t2.micro",
      "AllowedValues" : [
        "t2.micro", "t2.small", "t2.medium", "t2.large",
        "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge",
        "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge",
        "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
        "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
        "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge"
      ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "KeyName": {
      "Type": "String",
      "Description": "Optional - Name of an existing EC2 KeyPair to enable SSH access to the ECS instances",
      "Default": ""
    },
    "EcsClusterName": {
      "Type": "String",
      "Description": "ECS Cluster Name",
      "Default": "Blox"
    },
    "QueueName": {
      "Type": "String",
      "Description": "SQS Queue Name",
      "Default": "css_queue"
    },
    "ApiStageName": {
      "Type": "String",
      "Description": "API Gateway Stage Name",
      "Default": "blox"
    }
  },

  "Mappings": {
    "RegionAmis": {
      "ap-northeast-1" : { "ami" : "ami-9cd57ffd" },
      "ap-southeast-1" : { "ami" : "ami-a900a3ca" },
      "ap-southeast-2" : { "ami" : "ami-5781be34" },
      "eu-west-1" : { "ami" : "ami-a1491ad2" },
      "eu-central-1" : { "ami" : "ami-54f5303b" },
      "us-east-1" : { "ami" : "ami-eca289fb" },
      "us-east-2" : { "ami" : "ami-446f3521" },
      "us-west-2" : { "ami" : "ami-7abc111a" }
    }
  },

  "Conditions": {
    "AttachKeyPair": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "KeyName" },
            ""
          ]
        }
      ]
    },
    "UseSpecifiedAmi": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "EcsAmiId" },
            ""
          ]
        }
      ]
    }
  },

  "Resources": {

    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true"
      }
    },
    "Subnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
        "VpcId": { "Ref": "Vpc" },
        "CidrBlock": "10.0.0.0/24",
        "MapPublicIpOnLaunch": "true"
      }
    },
    "Subnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
        "VpcId": { "Ref": "Vpc" },
        "CidrBlock": "10.0.1.0/24",
        "MapPublicIpOnLaunch": "true"
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "AttachInternetGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "Vpc" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "RouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      },
      "DependsOn" : "AttachInternetGateway"
    },
    "AttachSubnet1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet1" },
        "RouteTableId": { "Ref": "RouteTable" }
      }
    },
    "AttachSubnet2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet2" },
        "RouteTableId": { "Ref": "RouteTable" }
      }
    },

    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Blox Security Group",
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "SecurityGroup" },
        "SourceSecurityGroupId": { "Ref": "SecurityGroup" },
        "FromPort": "-1",
        "ToPort": "-1",
        "IpProtocol": "-1"
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {"Ref": "IamRoleInstance"}
        ]
      }
    },
    "IamRoleInstance": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "",
            [
              { "Ref": "EcsClusterName" },
              "InstanceRole"
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
        ]
      }
    },
    "IamRoleService": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "",
            [
              { "Ref": "EcsClusterName" },
              "ServiceRole"
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"
        ]
      }
    },
    "IamRoleTask": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "",
            [
              { "Ref": "EcsClusterName" },
              "TaskRole"
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs-tasks.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "",
                [
                  { "Ref": "EcsClusterName" },
                  "TaskPolicy"
                ]
              ]
            },
            "PolicyDocument": {
              "Version" : "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:DescribeClusters",
                    "ecs:DescribeContainerInstances",
                    "ecs:DescribeTaskDefinition",
                    "ecs:DescribeTasks",
                    "ecs:ListClusters",
                    "ecs:ListContainerInstances",
                    "ecs:ListTasks",
                    "ecs:StartTask",
                    "ecs:StopTask"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                    "sqs:GetQueueUrl",
                    "sqs:ReceiveMessage"
                  ],
                  "Resource": { "Fn::GetAtt": ["Queue", "Arn"] }
                }
              ]
            }
          }
        ]
      }
    },
    "IamRoleLambda": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "",
            [
              { "Ref": "EcsClusterName" },
              "LambdaRole"
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "",
                [
                  { "Ref": "EcsClusterName" },
                  "LambdaPolicy"
                ]
              ]
            },
            "PolicyDocument": {
              "Version" : "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },

    "Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::If": [
            "UseSpecifiedAmi",
            { "Ref": "EcsAmiId" },
            { "Fn::FindInMap": [ "RegionAmis", { "Ref": "AWS::Region" }, "ami" ] }
          ]
        },
        "KeyName": {
          "Fn::If": [
            "AttachKeyPair",
            { "Ref": "KeyName" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "InstanceType": { "Ref": "InstanceType" },
        "SubnetId": { "Ref": "Subnet1" },
        "IamInstanceProfile": { "Ref": "InstanceProfile" },
        "SecurityGroupIds": [
          { "Ref": "SecurityGroup" }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "echo ECS_CLUSTER=",
                { "Ref": "EcsClusterName" },
                " >> /etc/ecs/ecs.config\n"
              ]
            ]
          }
        }
      },
      "DependsOn": "Cluster"
    },

    "Cluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": { "Ref": "EcsClusterName" }
      }
    },
    "TaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": "BloxFramework",
        "TaskRoleArn": { "Fn::GetAtt": [ "IamRoleTask", "Arn"] },
        "ContainerDefinitions": [
          {
            "Name": "css",
            "Hostname": "css",
            "Image": "bloxoss/cluster-state-service:0.3.0",
            "Memory": "128",
            "Environment": [
              {
                "Name": "AWS_REGION",
                "Value": { "Ref": "AWS::Region" }
              }
            ],
            "Command": [
              "--bind", "0.0.0.0:3000",
              "--etcd-endpoint", "etcd:2379",
              "--queue", { "Ref": "QueueName" }
            ],
            "Links": [
              "etcd"
            ],
            "Essential": "false"
          },
          {
            "Name": "etcd",
            "Hostname": "etcd",
            "Image": "quay.io/coreos/etcd:v3.0.15",
            "Memory": "256",
            "Environment": [
              {
                "Name": "ETCDCTL_API",
                "Value": "3"
              }
            ],
            "Command": [
              "/usr/local/bin/etcd",
              "--data-dir", "/var/lib/etcd/data",
              "--wal-dir", "/var/lib/etcd/wal",
              "--listen-client-urls", "http://0.0.0.0:2379",
              "--advertise-client-urls", "http://0.0.0.0:2379",
              "--listen-peer-urls", "http://0.0.0.0:2380"
            ],
            "MountPoints": [
              {
                "SourceVolume": "etcd-state",
                "ContainerPath": "/var/lib/etcd"
              }
            ],
            "Essential": "true"
          }
        ],
        "Volumes": [
          {
            "Host": {
              "SourcePath": "/var/lib/etcd"
            },
            "Name": "etcd-state"
          }
        ]
      }
    },
    "Service": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": { "Ref": "EcsClusterName" },
        "DesiredCount": "1",
        "DeploymentConfiguration": {
          "MaximumPercent": "100",
          "MinimumHealthyPercent": "0"
        },
        "LoadBalancers": [
          {
            "TargetGroupArn": { "Ref": "TargetGroup" },
            "ContainerPort": "2000",
            "ContainerName": "scheduler"
          }
        ],
        "Role": { "Fn::GetAtt": [ "IamRoleService", "Arn"] },
        "TaskDefinition": { "Ref": "TaskDefinition" }
      },
      "DependsOn": [
        "LoadBalancer",
        "LoadBalancerListener",
        "TargetGroup"
      ]
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              { "Ref": "EcsClusterName" },
              "LoadBalancer"
            ]
          ]
        },
        "Scheme": "internal",
        "SecurityGroups": [
          { "Ref": "SecurityGroup" }
        ],
        "Subnets": [
          { "Ref": "Subnet1" },
          { "Ref": "Subnet2" }
        ]
      }
    },
    "LoadBalancerListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "TargetGroup" }
          }
        ],
        "LoadBalancerArn": { "Ref": "LoadBalancer" },
        "Port": "80",
        "Protocol": "HTTP"
      }
    },
    "TargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              { "Ref": "EcsClusterName" },
              "TargetGroup"
            ]
          ]
        },
        "HealthCheckIntervalSeconds": "60",
        "HealthCheckPath": "/v1/ping",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": "5",
        "HealthyThresholdCount": "2",
        "Port": "80",
        "Protocol": "HTTP",
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "30"
          }
        ],
        "UnhealthyThresholdCount": "2",
        "VpcId": { "Ref": "Vpc" }
      }
    },

    "CloudWatchEvents": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "CloudWatch ECS events",
        "Name": {
          "Fn::Join": [
            "",
            [
              { "Ref": "EcsClusterName" },
              "Events"
            ]
          ]
        },
        "EventPattern": {
          "source": [
            "aws.ecs"
          ],
          "detail-type": [
            "ECS Task State Change",
            "ECS Container Instance State Change"
          ]
        },
        "Targets": [
          {
            "Arn": { "Fn::GetAtt": ["Queue", "Arn"] },
            "Id": "SQSTarget"
          }
        ]
      }
    },
    "Queue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": { "Ref": "QueueName" }
      }
    },
    "QueuePolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [ {"Ref": "Queue"} ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": { "Fn::Join": [ "", [ { "Fn::GetAtt": ["Queue", "Arn"] }, "/SQSDefaultPolicy" ] ] },
          "Statement":[
            {
              "Sid": "TrustCWEToSendEventsToMyQueue",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": "sqs:SendMessage",
              "Resource": { "Fn::GetAtt": ["Queue", "Arn"] },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": { "Fn::GetAtt": ["CloudWatchEvents", "Arn"] }
                }
              }
            }
          ]
        }
      }
    },

    "Lambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "'use strict';\n",
                "var http = require('http');\n",
                "exports.handler = function(event, context) {\n",
                "// Setup request options and parameters\n",
                "var options = {\n",
                " host: '", { "Fn::GetAtt": [ "LoadBalancer", "DNSName" ] }, "',\n",
                " port: 80,\n",
                " path: event.path,\n",
                " method: event.httpMethod\n",
                "};\n",
                "// If you have headers, set them. Otherwise set to an empty map.\n",
                "if (event.headers && Object.keys(event.headers).length > 0) {\n",
                " options.headers = event.headers\n",
                "} else {\n",
                " options.headers = {};\n",
                "}\n",
                "// Build the query string.\n",
                "if ( event.queryStringParameters && event.queryStringParameters && Object.keys(event.queryStringParameters).length > 0 ) {\n",
                " var queryString = generateQueryString(event.queryStringParameters);\n",
                " if (queryString !== '') {\n",
                "  options.path += '?' + queryString;\n",
                " }\n",
                "}\n",
                "var req = http.request(options, function(response) {\n",
                " var responseString = '';\n",
                " response.setEncoding('utf8');\n",
                " // Another chunk of data has been received, so append it to `str`.\n",
                " response.on('data', function (chunk) {\n",
                "  responseString += chunk;\n",
                " });\n",
                " // The whole response has been received\n",
                " response.on('end', function () {\n",
                "  var result = {\n",
                "   statusCode: response.statusCode,\n",
                "   headers: response.headers,\n",
                "   body: responseString\n",
                "  };\n",
                "  context.succeed(result);\n",
                " })\n",
                "});\n",
                "if (event.body && event.body !== '') {\n",
                " req.write(event.body);\n",
                "}\n",
                "req.on('error', function(e) {\n",
                " console.log('problem with request: ' + e.message);\n",
                " context.fail({statusCode: 500, headers: {}, body: e.message});\n",
                "});\n",
                "req.end();\n",
                "};\n",
                "function generateQueryString(params) {\n",
                " var str = [];\n",
                " for(var p in params) {\n",
                "  if (params.hasOwnProperty(p)) {\n",
                "   str.push(encodeURIComponent(p) + '=' + encodeURIComponent(params[p]));\n",
                "  }\n",
                " }\n",
                " return str.join('&');\n",
                "}"
              ]
            ]
          }
        },
        "Description": "VPC Lambda Proxy",
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              { "Ref": "EcsClusterName" },
              "Lambda"
            ]
          ]
        },
        "Handler": "index.handler",
        "Runtime": "nodejs4.3",
        "Role": { "Fn::GetAtt": [ "IamRoleLambda", "Arn"] },
        "Timeout": "60",
        "VpcConfig": {
          "SecurityGroupIds": [ { "Ref": "SecurityGroup" } ],
          "SubnetIds": [
            { "Ref": "Subnet1" },
            { "Ref": "Subnet2" }
          ]
        }
      }
    },
    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Fn::GetAtt": [ "Lambda", "Arn" ] },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              { "Ref": "AWS::Region" },
              ":",
              { "Ref": "AWS::AccountId" },
              ":",
              { "Ref": "RestApi" },
              "/*/*/*"
            ]
          ]
        }
      }
    },
    "RestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              { "Ref": "EcsClusterName" },
              " API Gateway"
            ]
          ]
        },
        "Description": "API Gateway REST API"
      }
    },
    "ApiResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": { "Fn::GetAtt": ["RestApi", "RootResourceId"] },
        "PathPart": "{proxy+}",
        "RestApiId": { "Ref": "RestApi" }
      }
    },
    "ApiMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "ResourceId": { "Ref": "ApiResource" },
        "RestApiId": { "Ref": "RestApi" },
        "HttpMethod": "ANY",
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "Uri": { "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              { "Ref": "AWS::Region" },
              ":lambda:path/2015-03-31/functions/",
              { "Fn::GetAtt": [ "Lambda", "Arn" ] },
              "/invocations"
            ]
          ] }
        }
      }
    },
    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "Description": "Deploy API",
        "RestApiId": { "Ref": "RestApi" },
        "StageName": { "Ref": "ApiStageName" }
      },
      "DependsOn": "ApiMethod"
    }
  },

  "Outputs": {
    "RestApiUrl" : {
      "Description" : "REST API URL",
      "Value" : {
        "Fn::Join": [
          "",
          [
            "https://",
            { "Ref": "RestApi" },
            ".execute-api.",
            { "Ref": "AWS::Region" },
            ".amazonaws.com/",
            { "Ref": "ApiStageName" }
          ]
        ]
      }
    }
  },

  "AWSTemplateFormatVersion": "2010-09-09"
}
