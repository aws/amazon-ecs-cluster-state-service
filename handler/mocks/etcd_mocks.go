// Copyright 2016-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/blox/blox/cluster-state-service/handler/clients (interfaces: EtcdInterface)

package mocks

import (
	clientv3 "github.com/coreos/etcd/clientv3"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
)

// Mock of EtcdInterface interface
type MockEtcdInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockEtcdInterfaceRecorder
}

// Recorder for MockEtcdInterface (not exported)
type _MockEtcdInterfaceRecorder struct {
	mock *MockEtcdInterface
}

func NewMockEtcdInterface(ctrl *gomock.Controller) *MockEtcdInterface {
	mock := &MockEtcdInterface{ctrl: ctrl}
	mock.recorder = &_MockEtcdInterfaceRecorder{mock}
	return mock
}

func (_m *MockEtcdInterface) EXPECT() *_MockEtcdInterfaceRecorder {
	return _m.recorder
}

func (_m *MockEtcdInterface) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEtcdInterfaceRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockEtcdInterface) Delete(_param0 context.Context, _param1 string, _param2 ...clientv3.OpOption) (*clientv3.DeleteResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Delete", _s...)
	ret0, _ := ret[0].(*clientv3.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEtcdInterfaceRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", _s...)
}

func (_m *MockEtcdInterface) Get(_param0 context.Context, _param1 string, _param2 ...clientv3.OpOption) (*clientv3.GetResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Get", _s...)
	ret0, _ := ret[0].(*clientv3.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEtcdInterfaceRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", _s...)
}

func (_m *MockEtcdInterface) Put(_param0 context.Context, _param1 string, _param2 string, _param3 ...clientv3.OpOption) (*clientv3.PutResponse, error) {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Put", _s...)
	ret0, _ := ret[0].(*clientv3.PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEtcdInterfaceRecorder) Put(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", _s...)
}

func (_m *MockEtcdInterface) Watch(_param0 context.Context, _param1 string, _param2 ...clientv3.OpOption) clientv3.WatchChan {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Watch", _s...)
	ret0, _ := ret[0].(clientv3.WatchChan)
	return ret0
}

func (_mr *_MockEtcdInterfaceRecorder) Watch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Watch", _s...)
}
