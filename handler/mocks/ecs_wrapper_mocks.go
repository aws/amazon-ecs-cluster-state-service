// Copyright 2016-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/amazon-ecs-cluster-state-service/handler/reconcile/loader (interfaces: ECSWrapper)

package mocks

import (
	types "github.com/aws/amazon-ecs-cluster-state-service/handler/types"
	gomock "github.com/golang/mock/gomock"
)

// Mock of ECSWrapper interface
type MockECSWrapper struct {
	ctrl     *gomock.Controller
	recorder *_MockECSWrapperRecorder
}

// Recorder for MockECSWrapper (not exported)
type _MockECSWrapperRecorder struct {
	mock *MockECSWrapper
}

func NewMockECSWrapper(ctrl *gomock.Controller) *MockECSWrapper {
	mock := &MockECSWrapper{ctrl: ctrl}
	mock.recorder = &_MockECSWrapperRecorder{mock}
	return mock
}

func (_m *MockECSWrapper) EXPECT() *_MockECSWrapperRecorder {
	return _m.recorder
}

func (_m *MockECSWrapper) DescribeContainerInstances(_param0 *string, _param1 []*string) ([]types.ContainerInstance, []string, error) {
	ret := _m.ctrl.Call(_m, "DescribeContainerInstances", _param0, _param1)
	ret0, _ := ret[0].([]types.ContainerInstance)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockECSWrapperRecorder) DescribeContainerInstances(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeContainerInstances", arg0, arg1)
}

func (_m *MockECSWrapper) DescribeTasks(_param0 *string, _param1 []*string) ([]types.Task, []string, error) {
	ret := _m.ctrl.Call(_m, "DescribeTasks", _param0, _param1)
	ret0, _ := ret[0].([]types.Task)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockECSWrapperRecorder) DescribeTasks(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeTasks", arg0, arg1)
}

func (_m *MockECSWrapper) ListAllClusters() ([]*string, error) {
	ret := _m.ctrl.Call(_m, "ListAllClusters")
	ret0, _ := ret[0].([]*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockECSWrapperRecorder) ListAllClusters() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAllClusters")
}

func (_m *MockECSWrapper) ListAllContainerInstances(_param0 *string) ([]*string, error) {
	ret := _m.ctrl.Call(_m, "ListAllContainerInstances", _param0)
	ret0, _ := ret[0].([]*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockECSWrapperRecorder) ListAllContainerInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAllContainerInstances", arg0)
}

func (_m *MockECSWrapper) ListTasksWithDesiredStatus(_param0 *string, _param1 *string) ([]*string, error) {
	ret := _m.ctrl.Call(_m, "ListTasksWithDesiredStatus", _param0, _param1)
	ret0, _ := ret[0].([]*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockECSWrapperRecorder) ListTasksWithDesiredStatus(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTasksWithDesiredStatus", arg0, arg1)
}
