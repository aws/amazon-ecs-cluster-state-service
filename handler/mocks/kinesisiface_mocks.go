// Copyright 2016-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: src/github.com/aws/aws-sdk-go/service/kinesis/kinesisiface/interface.go

package mocks

import (
	request "github.com/aws/aws-sdk-go/aws/request"
	kinesis "github.com/aws/aws-sdk-go/service/kinesis"
	gomock "github.com/golang/mock/gomock"
)

// Mock of KinesisAPI interface
type MockKinesisAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockKinesisAPIRecorder
}

// Recorder for MockKinesisAPI (not exported)
type _MockKinesisAPIRecorder struct {
	mock *MockKinesisAPI
}

func NewMockKinesisAPI(ctrl *gomock.Controller) *MockKinesisAPI {
	mock := &MockKinesisAPI{ctrl: ctrl}
	mock.recorder = &_MockKinesisAPIRecorder{mock}
	return mock
}

func (_m *MockKinesisAPI) EXPECT() *_MockKinesisAPIRecorder {
	return _m.recorder
}

func (_m *MockKinesisAPI) AddTagsToStreamRequest(_param0 *kinesis.AddTagsToStreamInput) (*request.Request, *kinesis.AddTagsToStreamOutput) {
	ret := _m.ctrl.Call(_m, "AddTagsToStreamRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.AddTagsToStreamOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) AddTagsToStreamRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddTagsToStreamRequest", arg0)
}

func (_m *MockKinesisAPI) AddTagsToStream(_param0 *kinesis.AddTagsToStreamInput) (*kinesis.AddTagsToStreamOutput, error) {
	ret := _m.ctrl.Call(_m, "AddTagsToStream", _param0)
	ret0, _ := ret[0].(*kinesis.AddTagsToStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) AddTagsToStream(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddTagsToStream", arg0)
}

func (_m *MockKinesisAPI) CreateStreamRequest(_param0 *kinesis.CreateStreamInput) (*request.Request, *kinesis.CreateStreamOutput) {
	ret := _m.ctrl.Call(_m, "CreateStreamRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.CreateStreamOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) CreateStreamRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateStreamRequest", arg0)
}

func (_m *MockKinesisAPI) CreateStream(_param0 *kinesis.CreateStreamInput) (*kinesis.CreateStreamOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateStream", _param0)
	ret0, _ := ret[0].(*kinesis.CreateStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) CreateStream(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateStream", arg0)
}

func (_m *MockKinesisAPI) DecreaseStreamRetentionPeriodRequest(_param0 *kinesis.DecreaseStreamRetentionPeriodInput) (*request.Request, *kinesis.DecreaseStreamRetentionPeriodOutput) {
	ret := _m.ctrl.Call(_m, "DecreaseStreamRetentionPeriodRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.DecreaseStreamRetentionPeriodOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) DecreaseStreamRetentionPeriodRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecreaseStreamRetentionPeriodRequest", arg0)
}

func (_m *MockKinesisAPI) DecreaseStreamRetentionPeriod(_param0 *kinesis.DecreaseStreamRetentionPeriodInput) (*kinesis.DecreaseStreamRetentionPeriodOutput, error) {
	ret := _m.ctrl.Call(_m, "DecreaseStreamRetentionPeriod", _param0)
	ret0, _ := ret[0].(*kinesis.DecreaseStreamRetentionPeriodOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) DecreaseStreamRetentionPeriod(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecreaseStreamRetentionPeriod", arg0)
}

func (_m *MockKinesisAPI) DeleteStreamRequest(_param0 *kinesis.DeleteStreamInput) (*request.Request, *kinesis.DeleteStreamOutput) {
	ret := _m.ctrl.Call(_m, "DeleteStreamRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.DeleteStreamOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) DeleteStreamRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteStreamRequest", arg0)
}

func (_m *MockKinesisAPI) DeleteStream(_param0 *kinesis.DeleteStreamInput) (*kinesis.DeleteStreamOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteStream", _param0)
	ret0, _ := ret[0].(*kinesis.DeleteStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) DeleteStream(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteStream", arg0)
}

func (_m *MockKinesisAPI) DescribeLimitsRequest(_param0 *kinesis.DescribeLimitsInput) (*request.Request, *kinesis.DescribeLimitsOutput) {
	ret := _m.ctrl.Call(_m, "DescribeLimitsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.DescribeLimitsOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) DescribeLimitsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeLimitsRequest", arg0)
}

func (_m *MockKinesisAPI) DescribeLimits(_param0 *kinesis.DescribeLimitsInput) (*kinesis.DescribeLimitsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeLimits", _param0)
	ret0, _ := ret[0].(*kinesis.DescribeLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) DescribeLimits(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeLimits", arg0)
}

func (_m *MockKinesisAPI) DescribeStreamRequest(_param0 *kinesis.DescribeStreamInput) (*request.Request, *kinesis.DescribeStreamOutput) {
	ret := _m.ctrl.Call(_m, "DescribeStreamRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.DescribeStreamOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) DescribeStreamRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeStreamRequest", arg0)
}

func (_m *MockKinesisAPI) DescribeStream(_param0 *kinesis.DescribeStreamInput) (*kinesis.DescribeStreamOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeStream", _param0)
	ret0, _ := ret[0].(*kinesis.DescribeStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) DescribeStream(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeStream", arg0)
}

func (_m *MockKinesisAPI) DescribeStreamPages(_param0 *kinesis.DescribeStreamInput, _param1 func(*kinesis.DescribeStreamOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "DescribeStreamPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKinesisAPIRecorder) DescribeStreamPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeStreamPages", arg0, arg1)
}

func (_m *MockKinesisAPI) DisableEnhancedMonitoringRequest(_param0 *kinesis.DisableEnhancedMonitoringInput) (*request.Request, *kinesis.EnhancedMonitoringOutput) {
	ret := _m.ctrl.Call(_m, "DisableEnhancedMonitoringRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.EnhancedMonitoringOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) DisableEnhancedMonitoringRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DisableEnhancedMonitoringRequest", arg0)
}

func (_m *MockKinesisAPI) DisableEnhancedMonitoring(_param0 *kinesis.DisableEnhancedMonitoringInput) (*kinesis.EnhancedMonitoringOutput, error) {
	ret := _m.ctrl.Call(_m, "DisableEnhancedMonitoring", _param0)
	ret0, _ := ret[0].(*kinesis.EnhancedMonitoringOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) DisableEnhancedMonitoring(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DisableEnhancedMonitoring", arg0)
}

func (_m *MockKinesisAPI) EnableEnhancedMonitoringRequest(_param0 *kinesis.EnableEnhancedMonitoringInput) (*request.Request, *kinesis.EnhancedMonitoringOutput) {
	ret := _m.ctrl.Call(_m, "EnableEnhancedMonitoringRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.EnhancedMonitoringOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) EnableEnhancedMonitoringRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnableEnhancedMonitoringRequest", arg0)
}

func (_m *MockKinesisAPI) EnableEnhancedMonitoring(_param0 *kinesis.EnableEnhancedMonitoringInput) (*kinesis.EnhancedMonitoringOutput, error) {
	ret := _m.ctrl.Call(_m, "EnableEnhancedMonitoring", _param0)
	ret0, _ := ret[0].(*kinesis.EnhancedMonitoringOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) EnableEnhancedMonitoring(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnableEnhancedMonitoring", arg0)
}

func (_m *MockKinesisAPI) GetRecordsRequest(_param0 *kinesis.GetRecordsInput) (*request.Request, *kinesis.GetRecordsOutput) {
	ret := _m.ctrl.Call(_m, "GetRecordsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.GetRecordsOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) GetRecordsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRecordsRequest", arg0)
}

func (_m *MockKinesisAPI) GetRecords(_param0 *kinesis.GetRecordsInput) (*kinesis.GetRecordsOutput, error) {
	ret := _m.ctrl.Call(_m, "GetRecords", _param0)
	ret0, _ := ret[0].(*kinesis.GetRecordsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) GetRecords(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRecords", arg0)
}

func (_m *MockKinesisAPI) GetShardIteratorRequest(_param0 *kinesis.GetShardIteratorInput) (*request.Request, *kinesis.GetShardIteratorOutput) {
	ret := _m.ctrl.Call(_m, "GetShardIteratorRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.GetShardIteratorOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) GetShardIteratorRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetShardIteratorRequest", arg0)
}

func (_m *MockKinesisAPI) GetShardIterator(_param0 *kinesis.GetShardIteratorInput) (*kinesis.GetShardIteratorOutput, error) {
	ret := _m.ctrl.Call(_m, "GetShardIterator", _param0)
	ret0, _ := ret[0].(*kinesis.GetShardIteratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) GetShardIterator(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetShardIterator", arg0)
}

func (_m *MockKinesisAPI) IncreaseStreamRetentionPeriodRequest(_param0 *kinesis.IncreaseStreamRetentionPeriodInput) (*request.Request, *kinesis.IncreaseStreamRetentionPeriodOutput) {
	ret := _m.ctrl.Call(_m, "IncreaseStreamRetentionPeriodRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.IncreaseStreamRetentionPeriodOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) IncreaseStreamRetentionPeriodRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IncreaseStreamRetentionPeriodRequest", arg0)
}

func (_m *MockKinesisAPI) IncreaseStreamRetentionPeriod(_param0 *kinesis.IncreaseStreamRetentionPeriodInput) (*kinesis.IncreaseStreamRetentionPeriodOutput, error) {
	ret := _m.ctrl.Call(_m, "IncreaseStreamRetentionPeriod", _param0)
	ret0, _ := ret[0].(*kinesis.IncreaseStreamRetentionPeriodOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) IncreaseStreamRetentionPeriod(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IncreaseStreamRetentionPeriod", arg0)
}

func (_m *MockKinesisAPI) ListStreamsRequest(_param0 *kinesis.ListStreamsInput) (*request.Request, *kinesis.ListStreamsOutput) {
	ret := _m.ctrl.Call(_m, "ListStreamsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.ListStreamsOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) ListStreamsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListStreamsRequest", arg0)
}

func (_m *MockKinesisAPI) ListStreams(_param0 *kinesis.ListStreamsInput) (*kinesis.ListStreamsOutput, error) {
	ret := _m.ctrl.Call(_m, "ListStreams", _param0)
	ret0, _ := ret[0].(*kinesis.ListStreamsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) ListStreams(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListStreams", arg0)
}

func (_m *MockKinesisAPI) ListStreamsPages(_param0 *kinesis.ListStreamsInput, _param1 func(*kinesis.ListStreamsOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListStreamsPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKinesisAPIRecorder) ListStreamsPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListStreamsPages", arg0, arg1)
}

func (_m *MockKinesisAPI) ListTagsForStreamRequest(_param0 *kinesis.ListTagsForStreamInput) (*request.Request, *kinesis.ListTagsForStreamOutput) {
	ret := _m.ctrl.Call(_m, "ListTagsForStreamRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.ListTagsForStreamOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) ListTagsForStreamRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTagsForStreamRequest", arg0)
}

func (_m *MockKinesisAPI) ListTagsForStream(_param0 *kinesis.ListTagsForStreamInput) (*kinesis.ListTagsForStreamOutput, error) {
	ret := _m.ctrl.Call(_m, "ListTagsForStream", _param0)
	ret0, _ := ret[0].(*kinesis.ListTagsForStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) ListTagsForStream(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTagsForStream", arg0)
}

func (_m *MockKinesisAPI) MergeShardsRequest(_param0 *kinesis.MergeShardsInput) (*request.Request, *kinesis.MergeShardsOutput) {
	ret := _m.ctrl.Call(_m, "MergeShardsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.MergeShardsOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) MergeShardsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MergeShardsRequest", arg0)
}

func (_m *MockKinesisAPI) MergeShards(_param0 *kinesis.MergeShardsInput) (*kinesis.MergeShardsOutput, error) {
	ret := _m.ctrl.Call(_m, "MergeShards", _param0)
	ret0, _ := ret[0].(*kinesis.MergeShardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) MergeShards(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MergeShards", arg0)
}

func (_m *MockKinesisAPI) PutRecordRequest(_param0 *kinesis.PutRecordInput) (*request.Request, *kinesis.PutRecordOutput) {
	ret := _m.ctrl.Call(_m, "PutRecordRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.PutRecordOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) PutRecordRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutRecordRequest", arg0)
}

func (_m *MockKinesisAPI) PutRecord(_param0 *kinesis.PutRecordInput) (*kinesis.PutRecordOutput, error) {
	ret := _m.ctrl.Call(_m, "PutRecord", _param0)
	ret0, _ := ret[0].(*kinesis.PutRecordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) PutRecord(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutRecord", arg0)
}

func (_m *MockKinesisAPI) PutRecordsRequest(_param0 *kinesis.PutRecordsInput) (*request.Request, *kinesis.PutRecordsOutput) {
	ret := _m.ctrl.Call(_m, "PutRecordsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.PutRecordsOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) PutRecordsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutRecordsRequest", arg0)
}

func (_m *MockKinesisAPI) PutRecords(_param0 *kinesis.PutRecordsInput) (*kinesis.PutRecordsOutput, error) {
	ret := _m.ctrl.Call(_m, "PutRecords", _param0)
	ret0, _ := ret[0].(*kinesis.PutRecordsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) PutRecords(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutRecords", arg0)
}

func (_m *MockKinesisAPI) RemoveTagsFromStreamRequest(_param0 *kinesis.RemoveTagsFromStreamInput) (*request.Request, *kinesis.RemoveTagsFromStreamOutput) {
	ret := _m.ctrl.Call(_m, "RemoveTagsFromStreamRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.RemoveTagsFromStreamOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) RemoveTagsFromStreamRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveTagsFromStreamRequest", arg0)
}

func (_m *MockKinesisAPI) RemoveTagsFromStream(_param0 *kinesis.RemoveTagsFromStreamInput) (*kinesis.RemoveTagsFromStreamOutput, error) {
	ret := _m.ctrl.Call(_m, "RemoveTagsFromStream", _param0)
	ret0, _ := ret[0].(*kinesis.RemoveTagsFromStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) RemoveTagsFromStream(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveTagsFromStream", arg0)
}

func (_m *MockKinesisAPI) SplitShardRequest(_param0 *kinesis.SplitShardInput) (*request.Request, *kinesis.SplitShardOutput) {
	ret := _m.ctrl.Call(_m, "SplitShardRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.SplitShardOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) SplitShardRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SplitShardRequest", arg0)
}

func (_m *MockKinesisAPI) SplitShard(_param0 *kinesis.SplitShardInput) (*kinesis.SplitShardOutput, error) {
	ret := _m.ctrl.Call(_m, "SplitShard", _param0)
	ret0, _ := ret[0].(*kinesis.SplitShardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) SplitShard(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SplitShard", arg0)
}

func (_m *MockKinesisAPI) UpdateShardCountRequest(_param0 *kinesis.UpdateShardCountInput) (*request.Request, *kinesis.UpdateShardCountOutput) {
	ret := _m.ctrl.Call(_m, "UpdateShardCountRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kinesis.UpdateShardCountOutput)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) UpdateShardCountRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateShardCountRequest", arg0)
}

func (_m *MockKinesisAPI) UpdateShardCount(_param0 *kinesis.UpdateShardCountInput) (*kinesis.UpdateShardCountOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateShardCount", _param0)
	ret0, _ := ret[0].(*kinesis.UpdateShardCountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKinesisAPIRecorder) UpdateShardCount(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateShardCount", arg0)
}

func (_m *MockKinesisAPI) WaitUntilStreamExists(_param0 *kinesis.DescribeStreamInput) error {
	ret := _m.ctrl.Call(_m, "WaitUntilStreamExists", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKinesisAPIRecorder) WaitUntilStreamExists(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WaitUntilStreamExists", arg0)
}
